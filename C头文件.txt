1、从C源文件到可执行文件，需要经过预编译、编译、汇编和链接四个主要生产工序，每个生产工序应该对应各自的软件工具，如预编译器、C/CPP编译器、汇编器、链接器。每一个C/CPP源文件是一个独立的单元或模块，每个编译单元经编译后会生成一个.o文件。

2、对于预编译工具来说，其输入是 *.c, *.cpp, 输出是 *.i 文件，并通过 ‘#’开头的预编译指令控制预编译器的行为。头文件也是预编译工具的输入参数，但不能在预编译命令后面直接列出，必须放置在预编译工具能搜索到的include文件夹中或者当前目录中。

3、头文件通常但不必然命名为*.h。通过#include预编译指令将其引入C/CPP文件中，如果没有#include指令，预编译器无法识别头文件？

4、头文件的作用通常是将本单元模块（C/CPP源文件）中可供其它单元使用的宏、变量或函数声明，其它模块通过#include指令将其包含，以便使用这些公开的接口。本单元模块不公开的接口，应用‘static’关键字显式表明该接口是不公开的，仅在本单元中使用，因而不应在头文件中列出。

5、通常情况下，头文件example.h的内容是：公开的全局变量及函数声明，公开的宏定义等；在本单元example.c中对公开的全局变量及函数进行定义。如果本单元不对外公开接口，那么头文件不是必须的。在本单元example.c中加入#include "example.h"语句后,可先使用公开接口，然后在文件末尾再定义；如果本单元example.c中不加入#include "example.h"语句,则接口应先定义后使用。

6、头文件中公开的全局变量及函数应使用‘extern’关键字显式声明。以便其它单元引用时能准确的识别。‘extern’的意思是‘本文件（.c/.cpp/.h）外部定义的’。特别是对于本单元公开的全局变量，如果该变量没有‘extern’关键字修饰，那么本单元头文件被其它单元引用时，会被编译器误认为在其它单元中又定义了一个同名变量，从而形成重复定义错误。全局函数的声明默认具备‘extern’关键字修饰，因此全局函数申明可以不加‘extern’关键字。但在公开的接口均加上‘extern’关键字显得整齐划一，含义清晰。

7、为了提高编译速度，头文件中应仅仅包含需要引用的其它头文件。

8、头文件中的‘#pragma once 或 #ifndef __symbol …… #endif’预编译指令，其作用是避免本编译单元重复包含此头文件；对于不同的编译单元上述预编译指令不会相互影响，即是说编译单元一和编译单元二均包含了同一个头文件，那么该头文件都将在两个编译单元中展开。